{"version":3,"sources":["logo.svg","components/header/Header.js","hooqs/useNavbar.js","service/api.js","hooqs/useFetch.js","data/getURLs.js","config.js","components/home/Article.js","components/home/UserComponent.js","components/home/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","changeNav","classes","useTheme","className","AppBar","position","Toolbar","Typography","variant","Button","color","useNavbar","useState","isNavbar","setNavbar","handleScroll","window","scrollY","useEffect","addEventListener","removeEventListener","get","url","fetch","then","res","text","data","JSON","parse","cache","Map","useFetch","dataURL","setData","loaded","setLoaded","has","set","newsURL","apikey","Article","props","console","log","style","paddingRight","zIndex","width","src","urlToImage","height","description","UserPage","isShown","setIsShown","currentArticle","setCurrentArticle","textAlign","articles","map","d","i","key","onMouseEnter","padding","HomePage","paddingTop","App","isLoaded","newsData","isRow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45a610a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header = ({ changeNav }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" className={changeNav ? \"green\" : \"\"}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            LOGO\r\n          </Typography>\r\n          <Button color=\"inherit\">Button</Button>\r\n          <Button color=\"inherit\">Button</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction useNavbar() {\r\n  const [isNavbar, setNavbar] = useState(false);\r\n\r\n  const handleScroll = () => {\r\n    window.scrollY > 100 ? setNavbar(true) : setNavbar(false);\r\n  };\r\n\r\n  // This function handle the scroll performance issue\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", () => handleScroll);\r\n    };\r\n  }, [handleScroll]);\r\n\r\n  return { isNavbar };\r\n}\r\n\r\nexport default useNavbar;\r\n","const get = (url) => {\r\n  return fetch(url)\r\n    .then((res) => res.text())\r\n    .then((data) => JSON.parse(data));\r\n};\r\n\r\nexport default get;\r\n","import { useState, useEffect } from \"react\";\r\nimport get from \"../service/api\";\r\nconst cache = new Map();\r\n\r\nconst useFetch = (dataURL) => {\r\n  const [data, setData] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (cache.has(dataURL)) {\r\n      setData(cache.get(dataURL));\r\n      setLoaded(true);\r\n    } else {\r\n      get(dataURL).then((data) => {\r\n        cache.set(dataURL, data);\r\n        setData(data);\r\n        setLoaded(true);\r\n      });\r\n    }\r\n  }, [dataURL]);\r\n  return [loaded, data];\r\n};\r\n\r\nexport default useFetch;\r\n","import config from \"../config\";\r\nconst bcURL =\r\n  \"https://gist.githubusercontent.com/justin0022/2bfbe3a4ad08788ec294264b7187cd52/raw/cbcf2e93337bdbbc0585c50546a87cabdd53f2fd/barChartData.json\";\r\nconst newsURL = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${config.apikey}`;\r\nexport default newsURL;\r\n","const config = {\n  apikey: '9890354320e843c6a2d36fe0d70c305f',\n};\nexport default config;\n","import React, { useEffect, useState } from \"react\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nfunction Article(props) {\r\n  const { data } = props;\r\n  console.log(data);\r\n  return (\r\n    <div\r\n      className=\"article\"\r\n      style={{\r\n        position: \"fixed\",\r\n\r\n        paddingRight: \"10px\",\r\n        zIndex: \"10000\",\r\n        width: \"65.5%\",\r\n      }}\r\n    >\r\n      <div className=\"card\">\r\n        <div className=\"card-image\">\r\n          <img\r\n            className=\"responsive-img\"\r\n            src={data.urlToImage}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </div>\r\n        <div className=\"card-stacked\">\r\n          <div className=\"card-content\">\r\n            <p>{data.description}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Article;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport Article from \"./Article\";\r\nfunction UserPage(props) {\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [currentArticle, setCurrentArticle] = useState({});\r\n  const readArticle = (article) => {\r\n    setCurrentArticle(article);\r\n    setIsShown(true);\r\n    console.log(currentArticle);\r\n  };\r\n  const { data } = props;\r\n  return (\r\n    <div className=\"row\">\r\n      <div\r\n        className=\"col s4\"\r\n        style={{\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <div className=\"row\">\r\n          {data.articles.map((d, i) => (\r\n            <div className=\"col s12\" key={i}>\r\n              <div className=\"card\" onMouseEnter={() => readArticle(d)}>\r\n                <div\r\n                  className=\"a-title\"\r\n                  style={{ height: \"90px\", padding: \"5px\" }}\r\n                >\r\n                  {/* <LazyLoadImage src={d.title} /> */}\r\n                  <p>{d.title}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"col s8\">\r\n        {isShown && (\r\n          <Article data={currentArticle}>\r\n            {\" \"}\r\n            : <h1>loadingg.....</h1>\r\n          </Article>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport UserPage from \"./UserComponent\";\r\nfunction HomePage(props) {\r\n  const { loaded, data } = props;\r\n  return (\r\n    <div className=\"home\" style={{ paddingTop: \"70px\" }}>\r\n      {loaded ? <UserPage data={data} /> : <h2>Loaing.....</h2>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Header from \"./components/header/Header\";\nimport useNavbar from \"./hooqs/useNavbar\";\nimport useFetch from \"./hooqs/useFetch\";\nimport newsURL from \"./data/getURLs\";\nimport HomePage from \"./components/home/home\";\nimport Home from \"./components/home/home\";\n\nfunction App() {\n  //const [isLoaded, chartData] = useFetch(bcURL);\n  const [isLoaded, newsData] = useFetch(newsURL);\n  const { isNavbar, isRow } = useNavbar();\n\n  console.log(newsData);\n  return (\n    <div className=\"grey lighten-4\">\n      <Header changeNav={isNavbar} />\n\n      <div>\n        {\" \"}\n        <HomePage data={newsData} loaded={isLoaded} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}